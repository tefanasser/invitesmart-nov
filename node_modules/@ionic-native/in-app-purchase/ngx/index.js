import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var InAppPurchase = /** @class */ (function (_super) {
    __extends(InAppPurchase, _super);
    function InAppPurchase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InAppPurchase.prototype.getProducts = function (productId) { return cordova(this, "getProducts", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.buy = function (productId) { return cordova(this, "buy", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.subscribe = function (productId) { return cordova(this, "subscribe", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.consume = function (productType, receipt, signature) { return cordova(this, "consume", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.restorePurchases = function () { return cordova(this, "restorePurchases", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.getReceipt = function () { return cordova(this, "getReceipt", { "otherPromise": true, "platforms": ["iOS"] }, arguments); };
    InAppPurchase.pluginName = "InAppPurchase";
    InAppPurchase.plugin = "cordova-plugin-inapppurchase";
    InAppPurchase.pluginRef = "inAppPurchase";
    InAppPurchase.repo = "https://github.com/AlexDisler/cordova-plugin-inapppurchase";
    InAppPurchase.platforms = ["Android", "iOS"];
    InAppPurchase = __decorate([
        Injectable()
    ], InAppPurchase);
    return InAppPurchase;
}(IonicNativePlugin));
export { InAppPurchase };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2luLWFwcC1wdXJjaGFzZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUE4RHJDLGlDQUFpQjs7OztJQVVsRCxtQ0FBVyxhQUFDLFNBQW1CO0lBWS9CLDJCQUFHLGFBQUMsU0FBaUI7SUFZckIsaUNBQVMsYUFBQyxTQUFpQjtJQWMzQiwrQkFBTyxhQUFDLFdBQW1CLEVBQUUsT0FBZSxFQUFFLFNBQWlCO0lBVy9ELHdDQUFnQjtJQVloQixrQ0FBVTs7Ozs7O0lBdkVDLGFBQWE7UUFEekIsVUFBVSxFQUFFO09BQ0EsYUFBYTt3QkEvRDFCO0VBK0RtQyxpQkFBaUI7U0FBdkMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5cbi8qKlxuICogQG5hbWUgSW4gQXBwIFB1cmNoYXNlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgbGlnaHR3ZWlnaHQgQ29yZG92YSBwbHVnaW4gZm9yIGluIGFwcCBwdXJjaGFzZXMgb24gaU9TL0FuZHJvaWQuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBJbkFwcFB1cmNoYXNlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9pbi1hcHAtcHVyY2hhc2Uvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGlhcDogSW5BcHBQdXJjaGFzZSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5pYXBcbiAqICAuZ2V0UHJvZHVjdHMoWydwcm9kMScsICdwcm9kMicsIC4uLl0pXG4gKiAgLnRoZW4oKHByb2R1Y3RzKSA9PiB7XG4gKiAgICBjb25zb2xlLmxvZyhwcm9kdWN0cyk7XG4gKiAgICAgLy8gIFt7IHByb2R1Y3RJZDogJ2NvbS55b3VyYXBwLnByb2QxJywgJ3RpdGxlJzogJy4uLicsIGRlc2NyaXB0aW9uOiAnLi4uJywgcHJpY2U6ICcuLi4nIH0sIC4uLl1cbiAqICB9KVxuICogIC5jYXRjaCgoZXJyKSA9PiB7XG4gKiAgICBjb25zb2xlLmxvZyhlcnIpO1xuICogIH0pO1xuICpcbiAqXG4gKiB0aGlzLmlhcFxuICogICAuYnV5KCdwcm9kMScpXG4gKiAgIC50aGVuKChkYXRhKT0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAqICAgICAvLyB7XG4gKiAgICAgLy8gICB0cmFuc2FjdGlvbklkOiAuLi5cbiAqICAgICAvLyAgIHJlY2VpcHQ6IC4uLlxuICogICAgIC8vICAgc2lnbmF0dXJlOiAuLi5cbiAqICAgICAvLyB9XG4gKiAgIH0pXG4gKiAgIC5jYXRjaCgoZXJyKT0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICogICB9KTtcbiAqXG4gKiBgYGBcbiAqXG4gKiBAYWR2YW5jZWRcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyBmaXN0IGJ1eSB0aGUgcHJvZHVjdC4uLlxuICogdGhpcy5pYXBcbiAqICAgLmJ1eSgnY29uc3VtYWJsZV9wcm9kMScpXG4gKiAgIC50aGVuKGRhdGEgPT4gdGhpcy5pYXAuY29uc3VtZShkYXRhLnByb2R1Y3RUeXBlLCBkYXRhLnJlY2VpcHQsIGRhdGEuc2lnbmF0dXJlKSlcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ3Byb2R1Y3Qgd2FzIHN1Y2Nlc3NmdWxseSBjb25zdW1lZCEnKSlcbiAqICAgLmNhdGNoKCBlcnI9PiBjb25zb2xlLmxvZyhlcnIpKVxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnSW5BcHBQdXJjaGFzZScsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWluYXBwcHVyY2hhc2UnLFxuICBwbHVnaW5SZWY6ICdpbkFwcFB1cmNoYXNlJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9BbGV4RGlzbGVyL2NvcmRvdmEtcGx1Z2luLWluYXBwcHVyY2hhc2UnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJbkFwcFB1cmNoYXNlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBsaXN0IG9mIGZ1bGwgcHJvZHVjdCBkYXRhIGZyb20gQXBwbGUvR29vZ2xlLiBUaGlzIG1ldGhvZCBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgbWFraW5nIHB1cmNoYXNlcy5cbiAgICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBwcm9kdWN0SWQgYW4gYXJyYXkgb2YgcHJvZHVjdCBpZHMuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBvYmplY3RzLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG90aGVyUHJvbWlzZTogdHJ1ZVxuICB9KVxuICBnZXRQcm9kdWN0cyhwcm9kdWN0SWQ6IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQnV5IGEgcHJvZHVjdCB0aGF0IG1hdGNoZXMgdGhlIHByb2R1Y3RJZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb2R1Y3RJZCBBIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIHByb2R1Y3QgeW91IHdhbnQgdG8gYnV5LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7dHJhbnNhY3Rpb25JZDogc3RyaW5nLCByZWNlaXB0OiBzdHJpbmcsIHNpZ25hdHVyZTogc3RyaW5nLCBwcm9kdWN0VHlwZTogc3RyaW5nfT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdHJhbnNhY3Rpb24gZGV0YWlscy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvdGhlclByb21pc2U6IHRydWVcbiAgfSlcbiAgYnV5KHByb2R1Y3RJZDogc3RyaW5nKTogUHJvbWlzZTx7IHRyYW5zYWN0aW9uSWQ6IHN0cmluZywgcmVjZWlwdDogc3RyaW5nLCBzaWduYXR1cmU6IHN0cmluZywgcHJvZHVjdFR5cGU6IHN0cmluZyB9PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgYnV5LCBidXQgZm9yIHN1YnNjcmlwdGlvbiBiYXNlZCBwcm9kdWN0cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb2R1Y3RJZCBBIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIHByb2R1Y3QgeW91IHdhbnQgdG8gc3Vic2NyaWJlIHRvLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7dHJhbnNhY3Rpb25JZDogc3RyaW5nLCByZWNlaXB0OiBzdHJpbmcsIHNpZ25hdHVyZTogc3RyaW5nLCBwcm9kdWN0VHlwZTogc3RyaW5nfT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdHJhbnNhY3Rpb24gZGV0YWlscy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvdGhlclByb21pc2U6IHRydWVcbiAgfSlcbiAgc3Vic2NyaWJlKHByb2R1Y3RJZDogc3RyaW5nKTogUHJvbWlzZTx7IHRyYW5zYWN0aW9uSWQ6IHN0cmluZywgcmVjZWlwdDogc3RyaW5nLCBzaWduYXR1cmU6IHN0cmluZywgcHJvZHVjdFR5cGU6IHN0cmluZyB9PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgdGhpcyBmdW5jdGlvbiBhZnRlciBwdXJjaGFzaW5nIGEgXCJjb25zdW1hYmxlXCIgcHJvZHVjdCB0byBtYXJrIGl0IGFzIGNvbnN1bWVkLiBPbiBBbmRyb2lkLCB5b3UgbXVzdCBjb25zdW1lIHByb2R1Y3RzIHRoYXQgeW91IHdhbnQgdG8gbGV0IHRoZSB1c2VyIHB1cmNoYXNlIG11bHRpcGxlIHRpbWVzLiBJZiB5b3Ugd2lsbCBub3QgY29uc3VtZSB0aGUgcHJvZHVjdCBhZnRlciBhIHB1cmNoYXNlLCB0aGUgbmV4dCB0aW1lIHlvdSB3aWxsIGF0dGVtcHQgdG8gcHVyY2hhc2UgaXQgeW91IHdpbGwgZ2V0IHRoZSBlcnJvciBtZXNzYWdlOlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvZHVjdFR5cGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlY2VpcHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNpZ25hdHVyZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG90aGVyUHJvbWlzZTogdHJ1ZVxuICB9KVxuICBjb25zdW1lKHByb2R1Y3RUeXBlOiBzdHJpbmcsIHJlY2VpcHQ6IHN0cmluZywgc2lnbmF0dXJlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0b3JlIGFsbCBwdXJjaGFzZXMgZnJvbSB0aGUgc3RvcmVcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBhcnJheSBvZiBwdXJjaGFzZXMuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb3RoZXJQcm9taXNlOiB0cnVlXG4gIH0pXG4gIHJlc3RvcmVQdXJjaGFzZXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSByZWNlaXB0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGNvbnRhaW5zIHRoZSBzdHJpbmcgZm9yIHRoZSByZWNlaXB0XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb3RoZXJQcm9taXNlOiB0cnVlLFxuICAgIHBsYXRmb3JtczogWydpT1MnXVxuICB9KVxuICBnZXRSZWNlaXB0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbn1cbiJdfQ==