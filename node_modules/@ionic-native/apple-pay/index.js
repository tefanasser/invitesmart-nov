var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ApplePayOriginal = /** @class */ (function (_super) {
    __extends(ApplePayOriginal, _super);
    function ApplePayOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ApplePayOriginal.prototype.canMakePayments = function () { return cordova(this, "canMakePayments", { "otherPromise": true }, arguments); };
    ApplePayOriginal.prototype.startListeningForShippingContactSelection = function () { return cordova(this, "startListeningForShippingContactSelection", { "observable": true, "clearFunction": "stopListeningForShippingContactSelection" }, arguments); };
    ApplePayOriginal.prototype.stopListeningForShippingContactSelection = function () { return cordova(this, "stopListeningForShippingContactSelection", { "otherPromise": true }, arguments); };
    ApplePayOriginal.prototype.updateItemsAndShippingMethods = function (list) { return cordova(this, "updateItemsAndShippingMethods", { "otherPromise": true }, arguments); };
    ApplePayOriginal.prototype.makePaymentRequest = function (order) { return cordova(this, "makePaymentRequest", { "otherPromise": true }, arguments); };
    ApplePayOriginal.prototype.completeLastTransaction = function (complete) { return cordova(this, "completeLastTransaction", { "otherPromise": true }, arguments); };
    ApplePayOriginal.pluginName = "ApplePay";
    ApplePayOriginal.plugin = "cordova-plugin-applepay";
    ApplePayOriginal.pluginRef = "ApplePay";
    ApplePayOriginal.repo = "https://github.com/samkelleher/cordova-plugin-applepay";
    ApplePayOriginal.platforms = ["iOS"];
    return ApplePayOriginal;
}(IonicNativePlugin));
var ApplePay = new ApplePayOriginal();
export { ApplePay };
//# sourceMappingURL=data:application/json;base64,